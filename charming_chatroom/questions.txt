1) What is a socket?
A socket is an endpoint for sending or receiving data across a computer network.
It provides an interface for applications to communicate, 
typically using TCP/IP protocols.

2) What is the difference between the domains AF_INET and AF_UNIX?
AF_INET: This domain is used for IPv4 Internet protocols. 
It deals with network communication, typically using TCP/IP.

AF_UNIX: This domain is used for local communication between processes 
on the same system using the Unix file system.

3) What is the difference between SOCK_STREAM and SOCK_DGRAM?
SOCK_STREAM: Provides a reliable, stream-oriented connection, typically used with TCP. 
It guarantees delivery and the order of messages.

SOCK_DGRAM: Provides a datagram-based, connectionless communication protocol, 
typically used with UDP. It does not guarantee delivery or the order of messages.

4) Why is it important to clear all the values the addrinfo struct before using it in getaddrinfo?
It's important to ensure that the addrinfo struct does not have any leftover 
or garbage values, which might cause unintended behavior. 
Clearing or zeroing out the structure can help prevent bugs 
and ensure that only the desired configuration options are set.

5) What are ai_family and ai_socktype?
ai_family: This refers to the desired address family for the returned addresses. 
Common values are AF_INET (IPv4) and AF_INET6 (IPv6).

ai_socktype: This specifies the preferred socket type, such as SOCK_STREAM 
(stream socket) or SOCK_DGRAM (datagram socket).

6) What does getaddrinfo do?
getaddrinfo is a function that resolves domain names or IP addresses 
and service names into a list of address structures. 
It's often used to prepare for socket creation and facilitate 
both IPv4 and IPv6 operations.

7) What does connect do?
The connect function is used to establish a connection to a remote server 
from the client side on a socket.

8) What is setsockopt?
setsockopt is a function used to set options on a socket, allowing you 
to configure aspects like the socket timeout, reuse addresses, 
set buffer sizes, and more.

9) What does bind do?
The bind function assigns a local protocol address to a socket. 
For example, with the Internet protocol, the address is the combination of 
an IP address and a port number.

10) What does listen do?
The listen function marks a socket as passive, where it will be used 
to accept incoming connection requests using accept.

11) What does accept do?
The accept function is used by a server to accept a connection request 
from a client. It extracts the first connection request from the queue of 
pending requests, creates a new socket, and returns a new file descriptor 
for that socket. The original socket remains in listening mode 
and can be used to accept further connections.


    // while (endSession == 0) {
    //     if (clientsCount < MAX_CLIENTS) {
    //         struct sockaddr client;
    //         socklen_t client_size = sizeof(client);
    //         memset(&client, 0, client_size);
    //         printf("waiting for user's connection'\n");
    //         int client_fd = accept(serverSocket, (struct sockaddr*) &client, &client_size);
    //         printf("before end session\n");
    //         if (endSession != 0) {
    //             break;
    //         }
    //         printf("before client_id check\n");
    //         if (client_fd == -1) {
    //             perror(NULL);
    //             if (res) {
    //                 freeaddrinfo(res);
    //             }
    //             close_server();
    //             exit(1);
    //         }

    //         intptr_t client_idx = -1;
    //         pthread_mutex_lock(&mutex);
    //         printf("locked\n");
    //         for (int i = 0; i < MAX_CLIENTS; i++) {
    //             printf("looking for client\n");
    //             if (clients[i] == -1) {
    //                 clients[i] = client_fd;
    //                 client_idx = i;
    //                 printf("found free client\n");
    //                 break;
    //             }
    //         }
    //         clientsCount++;
    //         printf("user joined\n");
    //         pthread_mutex_unlock(&mutex);

    //         pthread_t client_thread;
    //         int pthread_result = pthread_create(&client_thread, NULL, process_client, (void*)client_idx);
    //         if (pthread_result == -1) {
    //             perror(NULL);
    //             if (res) {
    //                 freeaddrinfo(res);
    //             }
    //             close_server();
    //             exit(1);
    //         }
    //     }
    // }
    // if (serverSocket != -1) {
    //     close_server();
    // }